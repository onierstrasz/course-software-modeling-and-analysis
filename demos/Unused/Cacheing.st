Object subclass: #Fibs	instanceVariableNames: 'fibCache'	classVariableNames: ''	poolDictionaries: ''	category: 'Cacheing'!!Fibs commentStamp: 'on 3/21/2006 19:06' prior: 0!Fast, cacheing version of Fibonacci function.Linear instead of exponential.Fibs new at: 100!!Fibs methodsFor: 'public' stamp: 'on 3/21/2006 16:59'!at: anIndex	"Fibs new at: 30"	self assert: anIndex >= 1.	anIndex = 1 ifTrue: [ ^ 1 ].	anIndex = 2 ifTrue: [ ^ 1 ].	^ (self lookup: anIndex - 1) + (self lookup: anIndex - 2)! !!Fibs methodsFor: 'private' stamp: 'on 3/21/2006 19:05'!fibCache	^ fibCache! !!Fibs methodsFor: 'private' stamp: 'on 3/21/2006 19:05'!initialize	fibCache := Dictionary new! !!Fibs methodsFor: 'private' stamp: 'on 3/21/2006 16:20'!lookup: anIndex	^ self fibCache at: anIndex ifAbsentPut: [ self at: anIndex ]! !Object subclass: #SlowFibs	instanceVariableNames: 'fibCache'	classVariableNames: ''	poolDictionaries: ''	category: 'Cacheing'!!SlowFibs commentStamp: 'on 3/21/2006 16:56' prior: 0!Slow, naive implementating of Fibonacci function.Try:SlowFibs new at: 30!!SlowFibs methodsFor: 'as yet unclassified' stamp: 'on 3/21/2006 16:56'!at: anIndex	"SlowFibs new at: 30"	self assert: anIndex >= 1.	anIndex = 1 ifTrue: [ ^ 1 ].	anIndex = 2 ifTrue: [ ^ 1 ].	^ (self at: anIndex - 1) + (self at: anIndex - 2)! !