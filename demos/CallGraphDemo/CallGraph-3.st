Object subclass: #Call	instanceVariableNames: 'callee'	classVariableNames: ''	poolDictionaries: ''	category: 'CallGraph'!!Call commentStamp: 'onierstrasz 8/17/2016 12:00' prior: 0!A Call instance represents a method invocation within a CallGraph!!Call methodsFor: 'initialization' stamp: 'onierstrasz 8/18/2016 10:11'!callee: aJMethod 	callee := aJMethod! !Object subclass: #CallGraph	instanceVariableNames: 'calls methods'	classVariableNames: ''	poolDictionaries: ''	category: 'CallGraph'!!CallGraph commentStamp: 'onierstrasz 8/17/2016 10:33' prior: 0!This class models a call graph that  has been reconstructed from a Javassist run-time log.!!CallGraph methodsFor: 'accessing' stamp: 'OscarNierstrasz 8/18/2016 10:09:31'!getMethod: signature  | fields methodName |  fields := $: split: signature.  methodName := fields at: 2.  ^ methods at: signature    ifAbsentPut: [ JMethod new name: methodName ]! !!CallGraph methodsFor: 'accessing' stamp: 'OscarNierstrasz 8/18/2016 10:09:31'!calls	^ calls! !!CallGraph methodsFor: 'accessing' stamp: 'OscarNierstrasz 8/18/2016 10:09:31'!methods	^ methods! !!CallGraph methodsFor: 'initialization' stamp: 'OscarNierstrasz 8/18/2016 10:09:31'!initialize	methods := Dictionary new! !!CallGraph methodsFor: 'initialization' stamp: 'OscarNierstrasz 8/18/2016 10:09:31'!createCall: callString	| fields callee |	fields := $| split: callString.	self assert: fields size = 5.	self assert: (fields at: 1) size = 0.	callee := self getMethod: (fields at: 2).	^ Call new callee: callee	"TODO -- handle the remaining fields!!"! !!CallGraph methodsFor: 'initialization' stamp: 'onierstrasz 8/18/2016 10:12'!from: aString			calls := ((Character cr split: aString)				select: #notEmpty)				collect: [ :each | self createCall: each ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CallGraph class	instanceVariableNames: ''!!CallGraph class methodsFor: 'examples' stamp: 'OscarNierstrasz 8/18/2016 10:09:31'!example	^ self new from: '|java.lang.String:org.clapper.util.html.HTMLUtil.convertCharacterEntities:java.lang.String|STATIC_METHOD|java.lang.String|org.clapper.util.html.test.HTMLEntitiesTest.convertHTMLEntities:47|org.clapper.util.text.XStringBufBase:org.clapper.util.text.XStringBufBase.append:java.lang.String|org.clapper.util.text.XStringBuffer|java.lang.String|org.clapper.util.html.HTMLUtil.convertCharacterEntities:240|java.lang.Appendable:org.clapper.util.text.XStringBuffer.getBufferAsAppendable|org.clapper.util.text.XStringBuffer| |org.clapper.util.text.XStringBufBase.append:469|java.lang.String:org.clapper.util.html.HTMLUtil.convertEntity:java.lang.String|STATIC_METHOD|java.lang.String|org.clapper.util.html.HTMLUtil.convertCharacterEntities:253|java.util.ResourceBundle:org.clapper.util.html.HTMLUtil.getResourceBundle|STATIC_METHOD| |org.clapper.util.html.HTMLUtil.convertEntity:424'! !!CallGraph class methodsFor: 'instance creation' stamp: 'OscarNierstrasz 8/18/2016 10:09:31'!fromFile: fileName  ^ self new from: fileName asFileReference contents! !TestCase subclass: #CallGraphTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'CallGraph'!!CallGraphTest methodsFor: 'tests' stamp: 'onierstrasz 8/18/2016 11:02'!testNumberOfMethods	self assert: CallGraph example methods size equals: 5! !!CallGraphTest methodsFor: 'tests' stamp: 'OscarNierstrasz 8/18/2016 10:09:31'!testNumberOfCalls  self assert: CallGraph example calls size equals: 5! !Object subclass: #JMethod	instanceVariableNames: 'name'	classVariableNames: ''	poolDictionaries: ''	category: 'CallGraph'!!JMethod commentStamp: 'onierstrasz 8/17/2016 12:01' prior: 0!A JMethod represents a Java method in a Java CallGraph. (NB: the calss Method already exists in the system.)!!JMethod methodsFor: 'initialization' stamp: 'onierstrasz 8/18/2016 10:11'!name: aString 	name := aString! !